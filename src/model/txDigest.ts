import BigNumber from 'bignumber.js';
import { Schema, model } from 'mongoose';

import { blockConciseSchema, IBlockConcise } from './blockConcise';

export interface ITxDigest {
  block: IBlockConcise;
  txHash: string;
  fee: BigNumber;

  from: string;
  to: string;
  mtr: BigNumber;
  mtrg: BigNumber;
  clauseIndexs: number[];

  txIndex?: number;

  method?: string;
  reverted?: boolean;

  seq: number; // generated by sync system to sort importance with 0 as most important
}

const schema = new Schema<ITxDigest>({
  block: blockConciseSchema,
  txHash: { type: String, required: true, index: true },
  fee: {
    type: String,
    get: (num: string) => new BigNumber(num),
    set: (bnum: BigNumber) => bnum.toFixed(0),
    required: true,
  },

  from: { type: String, required: true, index: true },
  to: { type: String, required: true, index: true },
  mtr: {
    type: String,
    get: (num: string) => new BigNumber(num),
    set: (bnum: BigNumber) => bnum.toFixed(0),
    required: true,
  },
  mtrg: {
    type: String,
    get: (num: string) => new BigNumber(num),
    set: (bnum: BigNumber) => bnum.toFixed(0),
    required: true,
  },
  clauseIndexs: [{ type: Number, required: true }],

  txIndex: { type: Number, default: 0, required: false },
  method: { type: String, default: '', required: true, index: true },
  reverted: { type: Boolean, default: false, required: true, index: true },
  seq: { type: Number, default: 0, required: true },
});

schema.index({ from: 1, to: 1 });
schema.index({ 'block.number': 1, txHash: 1, from: 1, to: 1, clauseIndexs: 1 }, { unique: true });
schema.index({ 'block.number': 1 });
schema.index({ 'block.number': -1 });
schema.index({ 'block.number': -1, txIndex: -1 });

schema.set('toJSON', {
  transform: (doc, ret, options) => {
    delete ret.__v;
    delete ret._id;
    return ret;
  },
});

export const TxDigest = model<ITxDigest>('TxDigest', schema, 'tx_digest');
